/*
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

-- CREACION DE UN NUEVO USUARIO
CREATE USER ANGEL IDENTIFIED BY CURSOP;

-- OTORGAR PRIVILEGIOS

GRANT ALL PRIVILEGES TO ANGEL;
*/
CREATE TABLE DEPARTAMENTO (  
ID_DEPARTAMENTO NUMBER,
NOMBRE NVARCHAR2(100),
CONSTRAINT DEPA_PK PRIMARY KEY(ID_DEPARTAMENTO)
);
DROP TABLE DEPARTAMENTO;
SELECT * FROM DEPARTAMENTO; 
-------------
CREATE TABLE EMPLEADO (  
ID_EMPLEADO NUMBER,
NOMBRE NVARCHAR2(100),
DEPARTAMENTO_ID NUMBER,
SALARIO NUMBER, ---- 1 = ALTO(>5000), 2 = MEDIO(2000-5000), 3 = BAJO(<2000)
FECHA_INGRESO NVARCHAR2(100),
CONSTRAINT EMPLE_PK PRIMARY KEY(ID_EMPLEADO),
CONSTRAINT DEPA_FK FOREIGN KEY(DEPARTAMENTO_ID) REFERENCES DEPARTAMENTO(ID_DEPARTAMENTO)
);
DROP TABLE EMPLEADO;
SELECT * FROM EMPLEADO; 
-------------
CREATE TABLE PROYECTO (  
ID_PROYECTO NUMBER,
NOMBRE NVARCHAR2(100),
FECHA_INICIO DATE,
FECHA_FIN DATE,
CONSTRAINT PROYE_PK PRIMARY KEY(ID_PROYECTO)
);
DROP TABLE PROYECTO;
SELECT * FROM PROYECTO; 
-----------------
CREATE TABLE ASIGNACION (  
ID_ASIGNACION NUMBER,
EMPLEADO_ID NUMBER,
PROYECTO_ID NUMBER,
HORAS_TRABAJADAS NUMBER,
CONSTRAINT ASIG_PK PRIMARY KEY(ID_ASIGNACION),
CONSTRAINT ASIG_EMPLE_FK FOREIGN KEY(EMPLEADO_ID) REFERENCES EMPLEADO(ID_EMPLEADO),
CONSTRAINT ASIG_PROYE_FK FOREIGN KEY(PROYECTO_ID) REFERENCES PROYECTO(ID_PROYECTO)
);
DROP TABLE ASIGNACION;
SELECT * FROM ASIGNACION;
--------------
---DATOS DEPARTAMENTO
INSERT INTO DEPARTAMENTO VALUES(1, 'REDES'); ---1
INSERT INTO DEPARTAMENTO VALUES(2, 'BD');---2
INSERT INTO DEPARTAMENTO VALUES(3, 'ANALIZIS');--3
INSERT INTO DEPARTAMENTO VALUES(4, 'PROGRAMACION');--4
COMMIT;
----DATOS EMPLEADO
INSERT INTO EMPLEADO VALUES(1, 'JUANITO',3, 2539,'1/4/2015');
INSERT INTO EMPLEADO VALUES(2, 'PABLITO',NULL, 7000, '21/7/2001');
INSERT INTO EMPLEADO VALUES(3, 'GRACIELA',1, 6550,'18/11/2009');
INSERT INTO EMPLEADO VALUES(4, 'PAMELA',4, 3700,'25/8/2022');
INSERT INTO EMPLEADO VALUES(5, 'IVON',NULL, 5000,'3/3/2013');
INSERT INTO EMPLEADO VALUES(6, 'ROMAN',2, 4321,'30/10/2014');
INSERT INTO EMPLEADO VALUES(7, 'BETRIN',3, 1990,'7/7/2017');
COMMIT;
----DATOS PROYECTO
INSERT INTO PROYECTO VALUES(1, 'ESTRUCTURADO','1/5/2018','21/10/2018');
INSERT INTO PROYECTO VALUES(2, 'CABLEADO','13/1/2015','1/1/2017');
INSERT INTO PROYECTO VALUES(3, 'SITIO WEB','25/9/2019','29/12/2021');
INSERT INTO PROYECTO VALUES(4, 'MINERIA','22/7/2021','1/10/2021');
INSERT INTO PROYECTO VALUES(5, 'PROTECCION','19/11/2023','1/1/2025');
COMMIT;
-----DATOS ASIGNACION
INSERT INTO ASIGNACION VALUES(1,6,4, 80);
INSERT INTO ASIGNACION VALUES(2,1,2, 90);
INSERT INTO ASIGNACION VALUES(3,4,5, 134);
INSERT INTO ASIGNACION VALUES(4,2,1, 200);
INSERT INTO ASIGNACION VALUES(5,3,3,190);
COMMIT;

--------2 -- CONSULTAS AGREGACION
--El salario promedio de los empleados en cada departamento.
SELECT CASE DEPARTAMENTO_ID
WHEN 1 THEN 'REDES'
WHEN 2 THEN 'BD'
WHEN 3 THEN 'ANALIZIS'
WHEN 4 THEN 'PROGRAMACION'
ELSE 'SIN DEPARTAMENTO'
END AS DEPARTAMENTO, AVG(SALARIO) FROM EMPLEADO WHERE DEPARTAMENTO_ID IS NOT NULL 
GROUP BY DEPARTAMENTO_ID ;

--El número total de proyectos asignados a cada empleado.
SELECT * FROM ASIGNACION;
SELECT E.NOMBRE, COUNT(A.ID_ASIGNACION)AS PROYECTO FROM ASIGNACION A RIGHT JOIN EMPLEADO E ON A.EMPLEADO_ID = E.ID_EMPLEADO GROUP BY E.NOMBRE;
--RIGHT

--La duración total de cada proyecto (diferencia entre la fecha de inicio y la fecha de fin).
SELECT  NOMBRE, FECHA_INICIO, FECHA_FIN, (FECHA_FIN - FECHA_INICIO)||' DIAS' AS DURACION FROM PROYECTO;

--------3 -- CONSULTAS JOIN
--Los nombres de los empleados junto con el nombre del departamento al que pertenecen.
SELECT E.NOMBRE AS EMPLEADO, D.NOMBRE AS DEPARTAMENTO FROM EMPLEADO E RIGHT JOIN DEPARTAMENTO D ON E.DEPARTAMENTO_ID = D.ID_DEPARTAMENTO 
ORDER BY D.NOMBRE;

--Los nombres de los proyectos junto con los nombres de los empleados asignados a esos proyectos y las horas trabajadas.
SELECT * FROM PROYECTO;
SELECT P.NOMBRE AS PROYECTO, E.NOMBRE AS EMPLEADO, A.HORAS_TRABAJADAS FROM ASIGNACION A FULL JOIN PROYECTO P ON A.PROYECTO_ID = P.ID_PROYECTO 
JOIN EMPLEADO E ON A.EMPLEADO_ID = E.ID_EMPLEADO;

--------4. Consultas con CASE
--Mostrar el salario de los empleados junto con una etiqueta que indique si el salario es "Alto" (> 5000), "Medio" (2000-5000) o "Bajo" (< 2000).
SELECT NOMBRE,SALARIO,CASE
WHEN SALARIO < 2000 THEN 'BAJO'
WHEN SALARIO BETWEEN 2000 AND 5000 THEN 'MEDIO'
WHEN  SALARIO > 5000 THEN 'ALTO'
ELSE 'SIN SALDO'
END AS SALARIO FROM EMPLEADO;

--Mostrar el nombre del proyecto y la duración del proyecto, junto con una etiqueta que indique si el proyecto está "Activo" (si la fecha actual está dentro del rango) o "Inactivo".
SELECT * FROM PROYECTO; 
SELECT NOMBRE,(FECHA_FIN - FECHA_INICIO) AS DURACION,
CASE WHEN SYSDATE BETWEEN FECHA_INICIO AND FECHA_FIN THEN 'Activo' 
ELSE 'Inactivo' END AS ESTADO_PROYECTO  FROM PROYECTO;
     
-- Parte 3: Procedimientos PL/SQL
-- 5. Crear un Procedimiento PL/SQL
--Tome como parámetro el ID_DEPARTAMENTO.
--Imprima los nombres y salarios de todos los empleados en ese departamento.
--Si el departamento no tiene empleados, imprima un mensaje indicando que no hay empleados en ese departamento.
SELECT * FROM EMPLEADO;
CREATE OR REPLACE PROCEDURE NOMBRE_SALARIO(ID_DEPA IN INT) 
IS
    N_EMPLEADOS INT;
BEGIN
    SELECT COUNT(*) INTO N_EMPLEADOS
    FROM EMPLEADO
    WHERE DEPARTAMENTO_ID = ID_DEPA;
    
    IF N_EMPLEADOS = 0 THEN
        DBMS_OUTPUT.PUT_LINE('NO HAY EMPLEADOS EN ESTE DEPARTAMENTO ');
    ELSE
        FOR i IN (SELECT NOMBRE, SALARIO
                  FROM EMPLEADO
                  WHERE DEPARTAMENTO_ID = ID_DEPA) LOOP
            DBMS_OUTPUT.PUT_LINE('EMPLEADO: ' || i.NOMBRE || '  SALARIO: ' || i.SALARIO);
        END LOOP;
    END IF;
END NOMBRE_SALARIO;
/
SET SERVEROUTPUT ON;
EXEC NOMBRE_SALARIO(1);

--Parte 4: Ejercicio de Aplicación

--6. Ejercicio Completo
--Escribe un procedimiento PL/SQL que:
--Calcule el total de horas trabajadas por cada empleado en todos los proyectos.
--Actualice la tabla EMPLEADO con un nuevo campo TOTAL_HORAS que almacene este total.
--Imprima un mensaje para cada empleado indicando el total de horas trabajadas.

ALTER TABLE EMPLEADO ADD TOTAL_HORAS NUMBER DEFAULT 0;

CREATE OR REPLACE PROCEDURE HORAS_TRABAJADAS IS
    T_HORAS INT;
  BEGIN
    FOR EMP IN (SELECT ID_EMPLEADO FROM EMPLEADO) LOOP
        SELECT NVL(SUM(HORAS_TRABAJADAS), 0)
        INTO T_HORAS
        FROM ASIGNACION
        WHERE EMPLEADO_ID = EMP.ID_EMPLEADO;
        
        UPDATE EMPLEADO
        SET TOTAL_HORAS = T_HORAS
        WHERE ID_EMPLEADO = EMP.ID_EMPLEADO;
        DBMS_OUTPUT.PUT_LINE('EMPLEADO CON ID: ' || EMP.ID_EMPLEADO || ' TIENE: ' || T_HORAS||' HORAS TRABAJADAS');
    END LOOP;
    COMMIT;
END HORAS_TRABAJADAS;
/
EXECUTE HORAS_TRABAJADAS;
SELECT ID_EMPLEADO, NOMBRE, TOTAL_HORAS FROM EMPLEADO;
----

--7. Crear y Consultar una Vista
CREATE OR REPLACE VIEW V_EMPLEADOS AS
SELECT  E.ID_EMPLEADO, E.NOMBRE AS NOMBRE_EMPLEADO, D.NOMBRE AS DEPARTAMENTO, NVL(SUM(A.HORAS_TRABAJADAS), 0) AS TOTAL_HORAS_TRABAJADAS
  FROM EMPLEADO E LEFT JOIN DEPARTAMENTO D ON E.DEPARTAMENTO_ID = D.ID_DEPARTAMENTO 
  RIGHT JOIN ASIGNACION A ON E.ID_EMPLEADO = A.EMPLEADO_ID GROUP BY E.ID_EMPLEADO, E.NOMBRE, D.NOMBRE;

SELECT * FROM V_EMPLEADOS WHERE TOTAL_HORAS_TRABAJADAS > 100;

SELECT * FROM V_EMPLEADOS WHERE NOMBRE_EMPLEADO LIKE '%A%';
      
