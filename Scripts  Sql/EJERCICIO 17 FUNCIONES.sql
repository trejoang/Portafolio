--USO DE LA FUNCIONES: SON BLOQUES PL/SQL QUE REALIZAN UNA TAREA EN ESPECIFICO
--CREAR FUNCION
CREATE OR REPLACE FUNCTION FN_NUMERO_PAR(P_NUMERO IN NUMBER)
RETURN NVARCHAR2
IS
LV_RESULTADO NVARCHAR2(100);
BEGIN
  --INSTRUCIONES
  --EL PARAMETRO ES DIVISIBLE ENTRE 2
  IF MOD(P_NUMERO, 2) =0 THEN
    LV_RESULTADO := 'EL RESULTADO: '|| P_NUMERO || ' ES PAR';
    
  ELSE 
    LV_RESULTADO :='EL NUMERO: '|| P_NUMERO || ' NO ES PAR';
  END IF;
  RETURN LV_RESULTADO;
  END FN_NUMERO_PAR;
  /
  --INVOCACION DE LA FUNCION CON UN BLOQUE ANONIMO
  BEGIN
   DBMS_OUTPUT.PUT_LINE(FN_NUMERO_PAR(1));
   END;
   /
--MEDIANTE CONSULTA
SELECT FN_NUMERO_PAR(10) FROM DUAL;

--REALIZAR LOS SIGUIENTES EJERCICIOS PARA PRACTICAR USO DE LAS FUNCIONES:
--1- REALIZAR UNA FUNCION QUE CALCULE EL AREA DEL CIRCULO Y QUE RECIBA COMO PARAMETRO EL RADIO
CREATE OR REPLACE FUNCTION FN_AREA_CIRCULO(RADIO IN NUMBER)
RETURN NVARCHAR2
IS LV_RESULTADO NVARCHAR2(100);
BEGIN 
     LV_RESULTADO :='EL CIRCULO TINE: '|| 3.1416 * RADIO * RADIO || ' DE AREA';
     RETURN LV_RESULTADO;
  END FN_AREA_CIRCULO;
/
 BEGIN
   DBMS_OUTPUT.PUT_LINE(FN_AREA_CIRCULO(5));
   END;
   /

--2- CREAR UNA FUNCION LLAMADA FN_ES_PRIMO QUE RECIBA COMO PARAMETRO UN NUMERO Y DEVULEVA EL MENSAJE INDICANDO SI ES UN NUMERO PRIMO
CREATE OR REPLACE FUNCTION FN_ES_PRIMO(NUMERO IN NUMBER)
RETURN VARCHAR2
IS
    i NUMBER;
    ES_PRIMO BOOLEAN := TRUE;
BEGIN
    -- Validar si el número es menor o igual a 1
    IF numero <= 1 THEN
        RETURN 'El número debe ser mayor que 1.';
    END IF;
    -- Comprobamos si el número tiene divisores
    FOR i IN 2..FLOOR(SQRT(NUMERO)) LOOP
        IF NUMERO MOD i = 0 THEN
            ES_PRIMO := FALSE;
            EXIT;
        END IF;
    END LOOP;
    -- Verificar el resultado y devolver el mensaje correspondiente
    IF ES_PRIMO THEN
        RETURN 'El número es primo.';
    ELSE
        RETURN 'El número no es primo.';
    END IF;
END FN_ES_PRIMO;
/
BEGIN
  DBMS_OUTPUT.PUT_LINE(FN_ES_PRIMO(4));
END;
/
   
--3- CREAR UNA FUNCION LLAMADA FN_NUMERO_MES QUE RECIBA UN NUMERO DEL UNO AL DOCE Y DEVUELVA EL NOMBRE DEL MES CORRESPONDIENTE EN ESPAÑOL
CREATE OR REPLACE FUNCTION FN_NUMERO_MES(MES IN NUMBER)
RETURN NVARCHAR2
IS LV_RESULTADO NVARCHAR2(100);
BEGIN 
     CASE MES
     WHEN  1 THEN LV_RESULTADO := 'ENERO';
     WHEN  2 THEN LV_RESULTADO := 'FEBRERO';
     WHEN  3 THEN LV_RESULTADO := 'MARZO';
     WHEN  4 THEN LV_RESULTADO := 'ABRIL';
     WHEN  5 THEN LV_RESULTADO := 'MAYO';
     WHEN  6 THEN LV_RESULTADO := 'JUNIO';
     WHEN  7 THEN LV_RESULTADO := 'JULIO';
     WHEN  8 THEN LV_RESULTADO := 'AGOSTO';
     WHEN  9 THEN LV_RESULTADO := 'SEPTIEMBRE';
     WHEN  10 THEN LV_RESULTADO := 'OCTUBRE';
     WHEN  11 THEN LV_RESULTADO := 'NOVIEMBRE';
     WHEN  12 THEN LV_RESULTADO := 'DICIEMBRE';
     ELSE LV_RESULTADO:= 'NO HAY MES';
     END CASE;
     LV_RESULTADO :='EL MES: '||MES ||' ES: '|| LV_RESULTADO ;
     RETURN LV_RESULTADO;
  END FN_NUMERO_MES;
/
 BEGIN
   DBMS_OUTPUT.PUT_LINE(FN_NUMERO_MES(6));
   END;
   /

--4- CREA UNA FUNCION QUE COMBIERTA LA TEMPERATURA DE GRADOS CELSIUS A FARENHEIT (F =(C*9/5) + 32)
CREATE OR REPLACE FUNCTION FN_TEM(C IN NUMBER)
RETURN NVARCHAR2
IS LV_RESULTADO NVARCHAR2(100);
BEGIN 
     LV_RESULTADO := (C * 9/5) + 32 ||' GRADOS FARENHEIT' ;
     RETURN LV_RESULTADO;
  END FN_TEM;
/
 BEGIN
   DBMS_OUTPUT.PUT_LINE(FN_TEM(30));
   END;
   /